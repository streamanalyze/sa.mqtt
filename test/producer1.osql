load_osql("mqtt.osql");
set :mqtt_connect_opts = {
  "qos": 0,
  "connection": "tcp://localhost:1883",
  "clientid": "producer1-qos0"
};

set :mqtt_connect_opts1 = {
  "qos": 1,
  "connection": "tcp://localhost:1883",
  "clientid": "producer1-qos1"
};

set :mqtt_connect_opts2 = {
  "qos": 2,
  "connection": "tcp://localhost:1883",
  "clientid": "producer1-qos2"
};

create function _merge_streams(Bag of Stream b) -> Stream
  /* QaD Use merge(Vector of Stream vs) instead */
  as merge(vectorof(b));
set_resulttypes(#'bag-stream._merge_streams->stream',
                'transparent-collection-resulttypes');

mqtt:register_client("mqtt",:mqtt_connect_opts);
mqtt:register_client("mqtt1",:mqtt_connect_opts1);
mqtt:register_client("mqtt2",:mqtt_connect_opts2);

create function wait(charstring topic) -> Stream
  as {
    sink(select stream of subscribe(topic) limit 1);
    return 1;
  };
create function timeout(Number s) -> Stream
  as select stream of sleep(s);


create function _merge_streams(Bag of Stream b) -> Stream
  /* QaD Use merge(Vector of Stream vs) instream */
  as merge(vectorof(b));
set_resulttypes(#'bag-stream._merge_streams->stream',
                'transparent-collection-resulttypes');

wait("mqtt:/g1");
sleep(1);
sink(first_n(_merge_streams(bag(
  wait("mqtt:/g2"),
  streamof(sink(first_n(publish(siota(1,100000000000),"mqtt:/max1"),10000) ))
)),1));
sink(first_n(_merge_streams(bag(
  wait("mqtt1:/g4"),
  streamof(sink(first_n(publish(siota(1,100000000000),"mqtt1:/max2"),10000) ))
)),1));
sink(first_n(_merge_streams(bag(
  wait("mqtt1:/g6"),
  streamof(sink(first_n(publish(siota(1,100000000000),"mqtt2:/max3"),10000) ))
)),1));
quit;
