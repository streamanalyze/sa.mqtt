load_osql("mqtt.osql");
// Get a C-backtrace on segfault, nice to have trace if 
// a crash occurs
_lisp("(sig-bt)");

set :mqtt_connect_opts = {
  "qos": 0,
  "connection": "tcp://localhost:1883",
  "clientid": "client"
};

set :mqtt_connect_opts1 = {
  "qos": 1,
  "connection": "tcp://localhost:1883",
  "clientid": "client2"
};

set :mqtt_connect_opts2 = {
  "qos": 2,
  "connection": "tcp://localhost:1883",
  "clientid": "client3"
};


mqtt:register_client("mqtt",:mqtt_connect_opts);

mqtt:register_client("mqtt1",:mqtt_connect_opts1);

mqtt:register_client("mqtt2",:mqtt_connect_opts2);

load_lisp("test/setup_test.lsp");
/* Do some basic benchmarks */
sleep(1);
validate "MQTT Fast"
  check print("\n") => true
  check sink(publish(diota(0.1,1,4),"mqtt:/g1")) => true
  check print("\tQoS0 " 
         + (1000/abs(now() - ts(last(select x 
                                       from Object x 
                                      where x in subscribe("mqtt:/max1") 
                                      limit 1000))))+" (~1000/time)") => true
  check sink(publish(diota(0.1,1,4),"mqtt:/g2")) => true
  check print("\tQoS1 " 
         + (1000/abs(now() - ts(last(select x 
                                       from Object x 
                                      where x in subscribe("mqtt1:/max2") 
                                      limit 1000))))+" (~1000/time)") => true
  check sink(publish(diota(0.1,1,4),"mqtt:/g4")) => true
  check print("\tQoS2 " 
         + (1000/abs(now() - ts(last(select x 
                                       from Object x 
                                      where x in subscribe("mqtt2:/max3") 
                                      limit 1000))))+" (~1000/time)") => true
  check sink(publish(diota(0.1,1,10),"mqtt:/g6")) => true;
