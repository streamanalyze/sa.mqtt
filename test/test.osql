load_osql("mqtt.osql");
// Get a C-backtrace on segfault, nice to have trace if 
// a crash occurs
_lisp("(sig-bt)");
set :mqtt_connect_opts = {
  "qos": 0,
  "connection": "tcp://localhost:1883",
  "clientid": "client"
};

set :mqtt_connect_opts1 = {
  "qos": 1,
  "connection": "tcp://localhost:1883",
  "clientid": "client2"
};

set :mqtt_connect_opts2 = {
  "qos": 2,
  "connection": "tcp://localhost:1883",
  "clientid": "client3"
};


mqtt:register_client("mqtt",:mqtt_connect_opts);

mqtt:register_client("mqtt1",:mqtt_connect_opts1);

mqtt:register_client("mqtt2",:mqtt_connect_opts2);

load_lisp("test/setup_test.lsp");
/* Example of a simple subscription on MQTT.
mqtt is the external prefix and /stream3 is
the topic on the broker mqtt is connected to.*/
validate "MQTT subscribe types"
   check sum(select integer(b)
           from Binary b 
          where b in subscribe("mqtt:/stream3")
          limit 10) >= 9 => true;

/* Example of amerging several mqtt streams from several
mqtt clients.*/
validate "MQTT Subscribes (and publish)"
   check count(extract(pivot_streams((select vector of s 
           from Stream s, Charstring topic
          where topic in bag("mqtt:/stream1","mqtt1:/stream2","mqtt2:/stream3")
            and s = (select stream of json:unstringify(charstring(b))
                       from binary b
                      where b in subscribe(topic)
                      limit 10))))) => 30;

/* Hold on, now we are publishing to mqtt client /pub then we subscribe
to mqtt1 /pub and add 10 to the number, publish the new number to 
mqtt1 /modified. Finally we subscribe to mqtt1 /modified and make sure the 
right values are emitted. */
validate "MQTT Modify and relay"
   check select distinct x
           from number x
          where x in extract(merge_streams(bag(
            (streamof(sink(publish(binary(integer(mod(diota(0.01,1,10000),5))), 
                                    "mqtt:/pub")))),
            (streamof(sink(publish((select stream of integer(b)+10
                                      from binary b 
                                      where b in subscribe("mqtt1:/pub")),
                                    "mqtt1:/modified")))),
            (select stream of json:unstringify(charstring(b))
               from Binary b
              where b in subscribe("mqtt:/modified"))))) 
          limit 10 => bag(12,13,14,10,11);


validate "MQTT create item not leaking objects"
  check aton(_lisp("(allocated-objects 'binary)")) < 30 => true;

quit;